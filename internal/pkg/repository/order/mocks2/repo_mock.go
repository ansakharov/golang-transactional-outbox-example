// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	order_entity "github.com/ansakharov/lets_test/internal/pkg/entity/order"
	"github.com/sirupsen/logrus"
	"sync"
)

// OrderRepoMock is a mock implementation of order.OrderRepo.
//
//	func TestSomethingThatUsesOrderRepo(t *testing.T) {
//
//		// make and configure a mocked order.OrderRepo
//		mockedOrderRepo := &OrderRepoMock{
//			GetFunc: func(ctx context.Context, log logrus.FieldLogger, IDs []uint64) (map[uint64]order_entity.Order, error) {
//				panic("mock out the Get method")
//			},
//			SaveFunc: func(ctx context.Context, log logrus.FieldLogger, order *order_entity.Order) (uint, error) {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedOrderRepo in code that requires order.OrderRepo
//		// and then make assertions.
//
//	}
type OrderRepoMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, log logrus.FieldLogger, IDs []uint64) (map[uint64]order_entity.Order, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, log logrus.FieldLogger, order *order_entity.Order) (uint, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Log is the log argument value.
			Log logrus.FieldLogger
			// IDs is the IDs argument value.
			IDs []uint64
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Log is the log argument value.
			Log logrus.FieldLogger
			// Order is the order argument value.
			Order *order_entity.Order
		}
	}
	lockGet  sync.RWMutex
	lockSave sync.RWMutex
}

// Get calls GetFunc.
func (mock *OrderRepoMock) Get(ctx context.Context, log logrus.FieldLogger, IDs []uint64) (map[uint64]order_entity.Order, error) {
	if mock.GetFunc == nil {
		panic("OrderRepoMock.GetFunc: method is nil but OrderRepo.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Log logrus.FieldLogger
		IDs []uint64
	}{
		Ctx: ctx,
		Log: log,
		IDs: IDs,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, log, IDs)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedOrderRepo.GetCalls())
func (mock *OrderRepoMock) GetCalls() []struct {
	Ctx context.Context
	Log logrus.FieldLogger
	IDs []uint64
} {
	var calls []struct {
		Ctx context.Context
		Log logrus.FieldLogger
		IDs []uint64
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *OrderRepoMock) Save(ctx context.Context, log logrus.FieldLogger, order *order_entity.Order) (uint, error) {
	if mock.SaveFunc == nil {
		panic("OrderRepoMock.SaveFunc: method is nil but OrderRepo.Save was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Log   logrus.FieldLogger
		Order *order_entity.Order
	}{
		Ctx:   ctx,
		Log:   log,
		Order: order,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, log, order)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedOrderRepo.SaveCalls())
func (mock *OrderRepoMock) SaveCalls() []struct {
	Ctx   context.Context
	Log   logrus.FieldLogger
	Order *order_entity.Order
} {
	var calls []struct {
		Ctx   context.Context
		Log   logrus.FieldLogger
		Order *order_entity.Order
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
